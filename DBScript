--------------------------------------------------------
--  File created - Sunday-July-28-2024   
--------------------------------------------------------
--------------------------------------------------------
--  DDL for Table ARRIVAL
--------------------------------------------------------

  CREATE TABLE "ARRIVAL" 
   (	"ARRIVALID" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"TEACHERID" NUMBER, 
	"CHILDID" NUMBER, 
	"STATUS" VARCHAR2(50)
   ) ;
--------------------------------------------------------
--  DDL for Table ATTENDANCE
--------------------------------------------------------

  CREATE TABLE "ATTENDANCE" 
   (	"ATTENDANCEID" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"ATTENDANCEDATE" TIMESTAMP (6) WITH TIME ZONE DEFAULT SYSTIMESTAMP, 
	"CHILDID" NUMBER, 
	"TEACHERID" NUMBER, 
	"STATUS" VARCHAR2(50)
   ) ;
--------------------------------------------------------
--  DDL for Table BUSES
--------------------------------------------------------

  CREATE TABLE "BUSES" 
   (	"BUSID" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"BUSNUMBER" VARCHAR2(50), 
	"CHILDRENNUMBER" NUMBER(*,0), 
	"DRIVERID" NUMBER, 
	"TEACHERID" NUMBER
   ) ;
--------------------------------------------------------
--  DDL for Table BUSLOCATION
--------------------------------------------------------

  CREATE TABLE "BUSLOCATION" 
   (	"LOCATIONID" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"LATITUDE" FLOAT(126), 
	"LONGITUDE" FLOAT(126), 
	"ADATE" TIMESTAMP (6) WITH TIME ZONE DEFAULT SYSTIMESTAMP, 
	"BUS_ID" NUMBER
   ) ;
--------------------------------------------------------
--  DDL for Table BUSROUTE
--------------------------------------------------------

  CREATE TABLE "BUSROUTE" 
   (	"ROUTEID" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"SEQUENCE" NUMBER(*,0), 
	"BUSES_ID" NUMBER, 
	"LOCATION_ID" NUMBER
   ) ;
--------------------------------------------------------
--  DDL for Table CHILDREN
--------------------------------------------------------

  CREATE TABLE "CHILDREN" 
   (	"CHILDID" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"FIRSTNAME" VARCHAR2(100), 
	"ADDRESS" VARCHAR2(255), 
	"PARENTID" NUMBER, 
	"BUSID" NUMBER, 
	"LASTNAME" VARCHAR2(100)
   ) ;
--------------------------------------------------------
--  DDL for Table CONTACTUS
--------------------------------------------------------

  CREATE TABLE "CONTACTUS" 
   (	"CONTACTUSID" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"UserNAME" VARCHAR2(50), 
	"SUBJECT" VARCHAR2(40), 
	"UserEMAIL" VARCHAR2(100), 
	"MESSAGE" VARCHAR2(1000), 
	"CONTACTDATE" TIMESTAMP (6) WITH TIME ZONE DEFAULT SYSTIMESTAMP
   ) ;
--------------------------------------------------------
--  DDL for Table LOGIN
--------------------------------------------------------

  CREATE TABLE "LOGIN" 
   (	"LOGINID" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"EMAIL" VARCHAR2(100), 
	"PASSWORD" VARCHAR2(255), 
	"USERID" NUMBER
   ) ;
--------------------------------------------------------
--  DDL for Table NOTIFICATIONS
--------------------------------------------------------

  CREATE TABLE "NOTIFICATIONS" 
   (	"NOTIFICATIONID" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"MESSAGE" VARCHAR2(255), 
	"NOTIFICATIONDATE" TIMESTAMP (6) WITH TIME ZONE DEFAULT SYSTIMESTAMP, 
	"PARENT_ID" NUMBER, 
	"TEACHER_ID" NUMBER
   ) ;
--------------------------------------------------------
--  DDL for Table PAGECONTENT
--------------------------------------------------------

  CREATE TABLE "PAGECONTENT" 
   (	"PAGECONTENTID" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"PAGENAME" VARCHAR2(100), 
	"CONTENTKEY" VARCHAR2(100), 
	"CONTENTVALUE" CLOB
   ) ;
--------------------------------------------------------
--  DDL for Table ROLE
--------------------------------------------------------

  CREATE TABLE "ROLE" 
   (	"ROLEID" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"ROLENAME" VARCHAR2(50)
   ) ;
--------------------------------------------------------
--  DDL for Table TESTIMONIAL
--------------------------------------------------------

  CREATE TABLE "TESTIMONIAL" 
   (	"TESTIMONIALID" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"MESSAGE" VARCHAR2(255), 
	"PUBLISHER_ID" NUMBER, 
	"STATUS" VARCHAR2(50)
   ) ;
--------------------------------------------------------
--  DDL for Table USER_
--------------------------------------------------------

  CREATE TABLE "USER_" 
   (	"USERID" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 2100 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"FIRSTNAME" VARCHAR2(100), 
	"IMAGEPATH" CLOB, 
	"PHONE" VARCHAR2(15), 
	"ROLEID" NUMBER, 
	"CreatedDate" TIMESTAMP (6) WITH TIME ZONE DEFAULT SYSTIMESTAMP, 
	"LASTNAME" VARCHAR2(100), 
	"ADDRESS" VARCHAR2(255), 
	"USERNAME" VARCHAR2(35), 
	"GENDER" VARCHAR2(20)
   ) ;
REM INSERTING into ARRIVAL
SET DEFINE OFF;
REM INSERTING into ATTENDANCE
SET DEFINE OFF;
REM INSERTING into BUSES
SET DEFINE OFF;
Insert into BUSES (BUSID,BUSNUMBER,CHILDRENNUMBER,DRIVERID,TEACHERID) values (1,'B101',25,21,31);
Insert into BUSES (BUSID,BUSNUMBER,CHILDRENNUMBER,DRIVERID,TEACHERID) values (2,'B102',30,22,32);
Insert into BUSES (BUSID,BUSNUMBER,CHILDRENNUMBER,DRIVERID,TEACHERID) values (3,'B103',20,23,33);
Insert into BUSES (BUSID,BUSNUMBER,CHILDRENNUMBER,DRIVERID,TEACHERID) values (4,'B104',15,24,34);
Insert into BUSES (BUSID,BUSNUMBER,CHILDRENNUMBER,DRIVERID,TEACHERID) values (5,'B105',18,25,35);
Insert into BUSES (BUSID,BUSNUMBER,CHILDRENNUMBER,DRIVERID,TEACHERID) values (6,'B106',22,26,36);
Insert into BUSES (BUSID,BUSNUMBER,CHILDRENNUMBER,DRIVERID,TEACHERID) values (7,'B107',27,27,37);
Insert into BUSES (BUSID,BUSNUMBER,CHILDRENNUMBER,DRIVERID,TEACHERID) values (8,'B108',19,28,38);
Insert into BUSES (BUSID,BUSNUMBER,CHILDRENNUMBER,DRIVERID,TEACHERID) values (9,'B109',24,29,39);
Insert into BUSES (BUSID,BUSNUMBER,CHILDRENNUMBER,DRIVERID,TEACHERID) values (10,'B110',16,null,null);
REM INSERTING into BUSLOCATION
SET DEFINE OFF;
REM INSERTING into BUSROUTE
SET DEFINE OFF;
REM INSERTING into CHILDREN
SET DEFINE OFF;
Insert into CHILDREN (CHILDID,FIRSTNAME,ADDRESS,PARENTID,BUSID,LASTNAME) values (63,'John','123 Main St, Springfield',1,1,'Doe');
Insert into CHILDREN (CHILDID,FIRSTNAME,ADDRESS,PARENTID,BUSID,LASTNAME) values (64,'Jane','456 Elm St, Springfield',2,2,'Smith');
Insert into CHILDREN (CHILDID,FIRSTNAME,ADDRESS,PARENTID,BUSID,LASTNAME) values (67,'Sarah','202 Pine St, Springfield',5,5,'Davis');
Insert into CHILDREN (CHILDID,FIRSTNAME,ADDRESS,PARENTID,BUSID,LASTNAME) values (68,'David','303 Cedar St, Springfield',6,1,'Wilson');
Insert into CHILDREN (CHILDID,FIRSTNAME,ADDRESS,PARENTID,BUSID,LASTNAME) values (69,'Laura','404 Birch St, Springfield',7,2,'Martinez');
Insert into CHILDREN (CHILDID,FIRSTNAME,ADDRESS,PARENTID,BUSID,LASTNAME) values (70,'Kevin','505 Walnut St, Springfield',8,3,'Garcia');
Insert into CHILDREN (CHILDID,FIRSTNAME,ADDRESS,PARENTID,BUSID,LASTNAME) values (71,'Amy','606 Poplar St, Springfield',9,4,'Clark');
REM INSERTING into CONTACTUS
SET DEFINE OFF;
REM INSERTING into LOGIN
SET DEFINE OFF;
Insert into LOGIN (LOGINID,EMAIL,PASSWORD,USERID) values (3,'raaad@gmail.com','1234773',2001);
Insert into LOGIN (LOGINID,EMAIL,PASSWORD,USERID) values (10,'jamala@gmail.com','1234773',2101);
Insert into LOGIN (LOGINID,EMAIL,PASSWORD,USERID) values (1,'john.doe@example.com','password123',1);
Insert into LOGIN (LOGINID,EMAIL,PASSWORD,USERID) values (2,'jane.smith@example.com','passw0rd',2);
Insert into LOGIN (LOGINID,EMAIL,PASSWORD,USERID) values (4,'saifob@gmail.com','12345678',2002);
Insert into LOGIN (LOGINID,EMAIL,PASSWORD,USERID) values (5,'sarah.davis@example.com','letmein',5);
Insert into LOGIN (LOGINID,EMAIL,PASSWORD,USERID) values (6,'david.wilson@example.com','admin123',6);
Insert into LOGIN (LOGINID,EMAIL,PASSWORD,USERID) values (7,'laura.martinez@example.com','password',7);
Insert into LOGIN (LOGINID,EMAIL,PASSWORD,USERID) values (8,'kevin.garcia@example.com','654321',8);
Insert into LOGIN (LOGINID,EMAIL,PASSWORD,USERID) values (9,'amy.clark@example.com','mypassword',9);
REM INSERTING into NOTIFICATIONS
SET DEFINE OFF;
REM INSERTING into PAGECONTENT
SET DEFINE OFF;
REM INSERTING into ROLE
SET DEFINE OFF;
Insert into ROLE (ROLEID,ROLENAME) values (1,'Admin');
Insert into ROLE (ROLEID,ROLENAME) values (2,'Teacher');
Insert into ROLE (ROLEID,ROLENAME) values (3,'Parent');
Insert into ROLE (ROLEID,ROLENAME) values (4,'Student');
Insert into ROLE (ROLEID,ROLENAME) values (5,'Driver');
REM INSERTING into TESTIMONIAL
SET DEFINE OFF;
REM INSERTING into USER_
SET DEFINE OFF;
Insert into USER_ (USERID,FIRSTNAME,PHONE,ROLEID,"CreatedDate",LASTNAME,ADDRESS,USERNAME,GENDER) values (2001,'mohd','07945745',5,to_timestamp_tz('27-JUL-24 07.34.36.969000000 PM +03:00','DD-MON-RR HH.MI.SSXFF AM TZR'),'aaaa','irbid','raaad','male');
Insert into USER_ (USERID,FIRSTNAME,PHONE,ROLEID,"CreatedDate",LASTNAME,ADDRESS,USERNAME,GENDER) values (2101,'jamal','07945745',5,to_timestamp_tz('27-JUL-24 08.16.39.908000000 PM +03:00','DD-MON-RR HH.MI.SSXFF AM TZR'),'obeida','irbid','jamala','male');
Insert into USER_ (USERID,FIRSTNAME,PHONE,ROLEID,"CreatedDate",LASTNAME,ADDRESS,USERNAME,GENDER) values (1,'John','+1-234-567-890',1,to_timestamp_tz('19-JUL-24 06.55.32.491000000 PM +03:00','DD-MON-RR HH.MI.SSXFF AM TZR'),'Doe','stri123 Main St, Springfieldng','johndoe','Male');
Insert into USER_ (USERID,FIRSTNAME,PHONE,ROLEID,"CreatedDate",LASTNAME,ADDRESS,USERNAME,GENDER) values (2,'Jane','+1-234-567-891',2,to_timestamp_tz('19-JUL-24 06.55.32.496000000 PM +03:00','DD-MON-RR HH.MI.SSXFF AM TZR'),'Smith','456 Elm St, Springfield','janesmith','Female');
Insert into USER_ (USERID,FIRSTNAME,PHONE,ROLEID,"CreatedDate",LASTNAME,ADDRESS,USERNAME,GENDER) values (3,'ahmad','+1-234-567-899',5,to_timestamp_tz('26-JUL-24 03.53.22.420000000 PM +03:00','DD-MON-RR HH.MI.SSXFF AM TZR'),'obeidat','707 Cherry St, Springfield','ahmadobeidat','male');
Insert into USER_ (USERID,FIRSTNAME,PHONE,ROLEID,"CreatedDate",LASTNAME,ADDRESS,USERNAME,GENDER) values (2002,'mohammad ','07842342342',5,to_timestamp_tz('27-JUL-24 07.38.13.321000000 PM +03:00','DD-MON-RR HH.MI.SSXFF AM TZR'),'obeidat','Naim Abdul Hadi St','saifob',null);
Insert into USER_ (USERID,FIRSTNAME,PHONE,ROLEID,"CreatedDate",LASTNAME,ADDRESS,USERNAME,GENDER) values (5,'Sarah','+1-234-567-894',3,to_timestamp_tz('19-JUL-24 06.55.32.514000000 PM +03:00','DD-MON-RR HH.MI.SSXFF AM TZR'),'Davis','202 Pine St, Springfield','sarahd','Female');
Insert into USER_ (USERID,FIRSTNAME,PHONE,ROLEID,"CreatedDate",LASTNAME,ADDRESS,USERNAME,GENDER) values (6,'David','+1-234-567-895',4,to_timestamp_tz('19-JUL-24 06.55.32.520000000 PM +03:00','DD-MON-RR HH.MI.SSXFF AM TZR'),'Wilson','303 Cedar St, Springfield','davidw','Male');
Insert into USER_ (USERID,FIRSTNAME,PHONE,ROLEID,"CreatedDate",LASTNAME,ADDRESS,USERNAME,GENDER) values (7,'Laura','+1-234-567-896',2,to_timestamp_tz('19-JUL-24 06.55.32.525000000 PM +03:00','DD-MON-RR HH.MI.SSXFF AM TZR'),'Martinez','404 Birch St, Springfield','lauram','Female');
Insert into USER_ (USERID,FIRSTNAME,PHONE,ROLEID,"CreatedDate",LASTNAME,ADDRESS,USERNAME,GENDER) values (8,'Kevin','+1-234-567-897',3,to_timestamp_tz('19-JUL-24 06.55.32.530000000 PM +03:00','DD-MON-RR HH.MI.SSXFF AM TZR'),'Garcia','505 Walnut St, Springfield','keving','Male');
Insert into USER_ (USERID,FIRSTNAME,PHONE,ROLEID,"CreatedDate",LASTNAME,ADDRESS,USERNAME,GENDER) values (9,'Amy','+1-234-567-898',4,to_timestamp_tz('19-JUL-24 06.55.32.536000000 PM +03:00','DD-MON-RR HH.MI.SSXFF AM TZR'),'Clark','606 Poplar St, Springfield','amyc','Female');
Insert into USER_ (USERID,FIRSTNAME,PHONE,ROLEID,"CreatedDate",LASTNAME,ADDRESS,USERNAME,GENDER) values (21,'John','+1-234-567-890',1,to_timestamp_tz('19-JUL-24 06.55.32.544000000 PM +03:00','DD-MON-RR HH.MI.SSXFF AM TZR'),'Doe','123 Main St, Springfield','johndoe2','Male');
Insert into USER_ (USERID,FIRSTNAME,PHONE,ROLEID,"CreatedDate",LASTNAME,ADDRESS,USERNAME,GENDER) values (22,'Jane','+1-234-567-891',2,to_timestamp_tz('19-JUL-24 06.55.32.548000000 PM +03:00','DD-MON-RR HH.MI.SSXFF AM TZR'),'Smith','456 Elm St, Springfield','janesmith2','Female');
Insert into USER_ (USERID,FIRSTNAME,PHONE,ROLEID,"CreatedDate",LASTNAME,ADDRESS,USERNAME,GENDER) values (23,'Emily','+1-234-567-892',3,to_timestamp_tz('19-JUL-24 06.55.32.554000000 PM +03:00','DD-MON-RR HH.MI.SSXFF AM TZR'),'Johnson','789 Oak St, Springfield','emilyj2','Female');
Insert into USER_ (USERID,FIRSTNAME,PHONE,ROLEID,"CreatedDate",LASTNAME,ADDRESS,USERNAME,GENDER) values (24,'Michael','+1-234-567-893',2,to_timestamp_tz('19-JUL-24 06.55.32.559000000 PM +03:00','DD-MON-RR HH.MI.SSXFF AM TZR'),'Brown','101 Maple St, Springfield','michaelb2','Male');
Insert into USER_ (USERID,FIRSTNAME,PHONE,ROLEID,"CreatedDate",LASTNAME,ADDRESS,USERNAME,GENDER) values (25,'Sarah','+1-234-567-894',3,to_timestamp_tz('19-JUL-24 06.55.32.562000000 PM +03:00','DD-MON-RR HH.MI.SSXFF AM TZR'),'Davis','202 Pine St, Springfield','sarahd2','Female');
Insert into USER_ (USERID,FIRSTNAME,PHONE,ROLEID,"CreatedDate",LASTNAME,ADDRESS,USERNAME,GENDER) values (26,'David','+1-234-567-895',4,to_timestamp_tz('19-JUL-24 06.55.32.568000000 PM +03:00','DD-MON-RR HH.MI.SSXFF AM TZR'),'Wilson','303 Cedar St, Springfield','davidw2','Male');
Insert into USER_ (USERID,FIRSTNAME,PHONE,ROLEID,"CreatedDate",LASTNAME,ADDRESS,USERNAME,GENDER) values (27,'Laura','+1-234-567-896',2,to_timestamp_tz('19-JUL-24 06.55.32.575000000 PM +03:00','DD-MON-RR HH.MI.SSXFF AM TZR'),'Martinez','404 Birch St, Springfield','lauram2','Female');
Insert into USER_ (USERID,FIRSTNAME,PHONE,ROLEID,"CreatedDate",LASTNAME,ADDRESS,USERNAME,GENDER) values (28,'Kevin','+1-234-567-897',3,to_timestamp_tz('19-JUL-24 06.55.32.580000000 PM +03:00','DD-MON-RR HH.MI.SSXFF AM TZR'),'Garcia','505 Walnut St, Springfield','keving2','Male');
Insert into USER_ (USERID,FIRSTNAME,PHONE,ROLEID,"CreatedDate",LASTNAME,ADDRESS,USERNAME,GENDER) values (29,'Amy','+1-234-567-898',4,to_timestamp_tz('19-JUL-24 06.55.32.583000000 PM +03:00','DD-MON-RR HH.MI.SSXFF AM TZR'),'Clark','606 Poplar St, Springfield','amyc2','Female');
Insert into USER_ (USERID,FIRSTNAME,PHONE,ROLEID,"CreatedDate",LASTNAME,ADDRESS,USERNAME,GENDER) values (31,'John','+1-234-567-890',1,to_timestamp_tz('19-JUL-24 06.55.32.592000000 PM +03:00','DD-MON-RR HH.MI.SSXFF AM TZR'),'Doe','123 Main St, Springfield','johndoe3','Male');
Insert into USER_ (USERID,FIRSTNAME,PHONE,ROLEID,"CreatedDate",LASTNAME,ADDRESS,USERNAME,GENDER) values (32,'Jane','+1-234-567-891',2,to_timestamp_tz('19-JUL-24 06.55.32.596000000 PM +03:00','DD-MON-RR HH.MI.SSXFF AM TZR'),'Smith','456 Elm St, Springfield','janesmith3','Female');
Insert into USER_ (USERID,FIRSTNAME,PHONE,ROLEID,"CreatedDate",LASTNAME,ADDRESS,USERNAME,GENDER) values (33,'Emily','+1-234-567-892',3,to_timestamp_tz('19-JUL-24 06.55.32.600000000 PM +03:00','DD-MON-RR HH.MI.SSXFF AM TZR'),'Johnson','789 Oak St, Springfield','emilyj3','Female');
Insert into USER_ (USERID,FIRSTNAME,PHONE,ROLEID,"CreatedDate",LASTNAME,ADDRESS,USERNAME,GENDER) values (34,'Michael','+1-234-567-893',2,to_timestamp_tz('19-JUL-24 06.55.32.605000000 PM +03:00','DD-MON-RR HH.MI.SSXFF AM TZR'),'Brown','101 Maple St, Springfield','michaelb3','Male');
Insert into USER_ (USERID,FIRSTNAME,PHONE,ROLEID,"CreatedDate",LASTNAME,ADDRESS,USERNAME,GENDER) values (35,'Sarah','+1-234-567-894',3,to_timestamp_tz('19-JUL-24 06.55.32.610000000 PM +03:00','DD-MON-RR HH.MI.SSXFF AM TZR'),'Davis','202 Pine St, Springfield','sarahd3','Female');
Insert into USER_ (USERID,FIRSTNAME,PHONE,ROLEID,"CreatedDate",LASTNAME,ADDRESS,USERNAME,GENDER) values (36,'David','+1-234-567-895',4,to_timestamp_tz('19-JUL-24 06.55.32.613000000 PM +03:00','DD-MON-RR HH.MI.SSXFF AM TZR'),'Wilson','303 Cedar St, Springfield','davidw3','Male');
Insert into USER_ (USERID,FIRSTNAME,PHONE,ROLEID,"CreatedDate",LASTNAME,ADDRESS,USERNAME,GENDER) values (37,'Laura','+1-234-567-896',2,to_timestamp_tz('19-JUL-24 06.55.32.618000000 PM +03:00','DD-MON-RR HH.MI.SSXFF AM TZR'),'Martinez','404 Birch St, Springfield','lauram3','Female');
Insert into USER_ (USERID,FIRSTNAME,PHONE,ROLEID,"CreatedDate",LASTNAME,ADDRESS,USERNAME,GENDER) values (38,'Kevin','+1-234-567-897',3,to_timestamp_tz('19-JUL-24 06.55.32.621000000 PM +03:00','DD-MON-RR HH.MI.SSXFF AM TZR'),'Garcia','505 Walnut St, Springfield','keving3','Male');
Insert into USER_ (USERID,FIRSTNAME,PHONE,ROLEID,"CreatedDate",LASTNAME,ADDRESS,USERNAME,GENDER) values (39,'Amy','+1-234-567-898',4,to_timestamp_tz('19-JUL-24 06.55.32.627000000 PM +03:00','DD-MON-RR HH.MI.SSXFF AM TZR'),'Clark','606 Poplar St, Springfield','amyc3','Female');
--------------------------------------------------------
--  DDL for Index USER__UK1
--------------------------------------------------------

  CREATE UNIQUE INDEX "USER__UK1" ON "USER_" ("USERNAME") 
  ;
--------------------------------------------------------
--  DDL for Package ARRIVAL_STATUS_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "ARRIVAL_STATUS_PACKAGE" AS
    PROCEDURE Create_Arrival(
        c_STATUS IN ARRIVAL.STATUS%TYPE,
        c_TEACHERID IN ARRIVAL.TEACHERID%TYPE,
        c_CHILDID IN ARRIVAL.CHILDID%TYPE
    );
    PROCEDURE Update_Arrival(
        u_ARRIVALID IN ARRIVAL.ARRIVALID%TYPE,
        u_STATUS IN ARRIVAL.STATUS%TYPE,
        u_TEACHERID IN ARRIVAL.TEACHERID%TYPE,
        u_CHILDID IN ARRIVAL.CHILDID%TYPE
    );
    PROCEDURE Delete_Arrival(
        d_ARRIVALID IN ARRIVAL.ARRIVALID%TYPE
    );
    PROCEDURE GetAllArrivals;
    PROCEDURE Get_Arrival_By_Id(
        get_ARRIVALID IN ARRIVAL.ARRIVALID%TYPE
    );
END Arrival_Status_Package;

/
--------------------------------------------------------
--  DDL for Package ATTENDANCE_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "ATTENDANCE_PACKAGE" IS
  PROCEDURE create_ATTENDANCE(
    c_ATTENDANCEDATE IN ATTENDANCE.ATTENDANCEDATE%TYPE,
    c_ChildId IN ATTENDANCE.ChildId%TYPE,
    c_STATUS IN ATTENDANCE.STATUS%TYPE,
    c_teacherId IN ATTENDANCE.teacherId%TYPE
  );

  PROCEDURE update_ATTENDANCE(
    u_ATTENDANCEId IN ATTENDANCE.ATTENDANCEId%TYPE,
    u_ATTENDANCEDATE IN ATTENDANCE.ATTENDANCEDATE%TYPE,
    u_ChildId IN ATTENDANCE.ChildId%TYPE,
    u_STATUS IN ATTENDANCE.STATUS%TYPE,
    u_teacherId IN ATTENDANCE.teacherId%TYPE
  );

  PROCEDURE delete_ATTENDANCE(
    d_ATTENDANCEId IN ATTENDANCE.ATTENDANCEId%TYPE
  );

  PROCEDURE get_ATTENDANCE_by_id(
    get_ATTENDANCEId IN ATTENDANCE.ATTENDANCEId%TYPE
  );

  PROCEDURE get_all_ATTENDANCE;

END ATTENDANCE_package;

/
--------------------------------------------------------
--  DDL for Package BUSES_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "BUSES_PACKAGE" IS
  PROCEDURE create_Buses(
    c_BusNumber IN Buses.BusNumber%TYPE,
    c_ChildrenNumber IN Buses.ChildrenNumber%TYPE,
    c_DriverId IN Buses.DriverId%TYPE,
    c_TEACHERID IN Buses.TEACHERID%Type
  );

  PROCEDURE update_Buses(
    u_BusId IN Buses.BusId%TYPE,
    u_BusNumber IN Buses.BusNumber%TYPE,
    u_ChildrenNumber IN Buses.ChildrenNumber%TYPE,
    u_DriverId IN Buses.DriverId%TYPE,
    u_TEACHERID IN Buses.TEACHERID%Type
  );

  PROCEDURE delete_Buses(
    d_BusId IN Buses.BusId%TYPE
  );

  PROCEDURE get_Buses_by_id(
    get_BusId IN Buses.BusId%TYPE
  );

  PROCEDURE get_all_Buses;

END Buses_package;

/
--------------------------------------------------------
--  DDL for Package BUSLOCATION_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "BUSLOCATION_PACKAGE" IS
  PROCEDURE Create_BusLocation(
    p_Latitude IN BusLocation.Latitude%TYPE,
    p_Longitude IN BusLocation.Longitude%TYPE,
    p_BusID IN BusLocation.Bus_ID%TYPE
  );

  PROCEDURE Update_BusLocation(
    p_LocationID IN BusLocation.LocationID%TYPE,
    p_Latitude IN BusLocation.Latitude%TYPE,
    p_Longitude IN BusLocation.Longitude%TYPE,
    p_BusID IN BusLocation.Bus_ID%TYPE
  );

  PROCEDURE Delete_BusLocation(
    p_LocationID IN BusLocation.LocationID%TYPE
  );

  PROCEDURE Get_BusLocation_By_ID(
    p_LocationID IN BusLocation.LocationID%TYPE
  );

  PROCEDURE Get_All_BusLocations;
END BusLocation_Package;

/
--------------------------------------------------------
--  DDL for Package BUSROUTE_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "BUSROUTE_PACKAGE" IS
  PROCEDURE Create_BusRoute(
    p_Sequence IN BusRoute.Sequence%TYPE,
    p_BusesID IN BusRoute.Buses_ID%TYPE,
    p_LocationID IN BusRoute.Location_ID%TYPE
  );

  PROCEDURE Update_BusRoute(
    p_RouteID IN BusRoute.RouteID%TYPE,
    p_Sequence IN BusRoute.Sequence%TYPE,
    p_BusesID IN BusRoute.Buses_ID%TYPE,
    p_LocationID IN BusRoute.Location_ID%TYPE
  );

  PROCEDURE Delete_BusRoute(
    p_RouteID IN BusRoute.RouteID%TYPE
  );

  PROCEDURE Get_BusRoute_By_ID(
    p_RouteID IN BusRoute.RouteID%TYPE
  );

  PROCEDURE Get_All_BusRoutes;
END BusRoute_Package;


/
--------------------------------------------------------
--  DDL for Package CHILDREN_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "CHILDREN_PACKAGE" IS
  PROCEDURE create_Children(
    c_firstName IN Children.firstName%TYPE,
    c_lastName IN Children.lastName%TYPE,
    c_Address IN Children.Address%TYPE,
    c_ParentId IN Children.ParentId%TYPE,
    c_BusId IN Children.BusId%TYPE
  );

  PROCEDURE update_Children(
    u_ChildId IN Children.ChildId%TYPE,
    u_firstName IN Children.firstName%TYPE,
    u_lastName IN Children.lastName%TYPE,
    u_Address IN Children.Address%TYPE,
    u_ParentId IN Children.ParentId%TYPE,
    u_BusId IN Children.BusId%TYPE
  );

  PROCEDURE delete_Children(
    d_ChildId IN Children.ChildId%TYPE
  );

  PROCEDURE get_Children_by_id(
    get_ChildId IN Children.ChildId%TYPE
  );

  PROCEDURE get_all_Children;

END Children_package;

/
--------------------------------------------------------
--  DDL for Package CONTACTUS_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "CONTACTUS_PACKAGE" IS
  PROCEDURE create_CONTACTUS(
    c_UserNAME IN CONTACTUS."UserNAME"%TYPE,
    c_SUBJECT IN CONTACTUS."SUBJECT"%TYPE,
    c_UserEMAIL IN CONTACTUS."UserEMAIL"%TYPE,
    c_MESSAGE IN CONTACTUS."MESSAGE"%TYPE,
    c_CONTACTDATE IN CONTACTUS."CONTACTDATE"%TYPE
  );

  PROCEDURE update_CONTACTUS(
    u_CONTACTUSID IN CONTACTUS."CONTACTUSID"%TYPE,
    u_UserNAME IN CONTACTUS."UserNAME"%TYPE,
    u_SUBJECT IN CONTACTUS."SUBJECT"%TYPE,
    u_UserEMAIL IN CONTACTUS."UserEMAIL"%TYPE,
    u_MESSAGE IN CONTACTUS."MESSAGE"%TYPE,
    u_CONTACTDATE IN CONTACTUS."CONTACTDATE"%TYPE
  );

  PROCEDURE delete_CONTACTUS(
    d_CONTACTUSID IN CONTACTUS."CONTACTUSID"%TYPE
  );

  PROCEDURE get_CONTACTUS_by_id(
    get_CONTACTUSID IN CONTACTUS."CONTACTUSID"%TYPE
  );

  PROCEDURE get_all_CONTACTUS;

END CONTACTUS_package;


/
--------------------------------------------------------
--  DDL for Package LOGIN_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "LOGIN_PACKAGE" 
as 
procedure Login(E_mail in varchar2, Pass in varchar2);
end Login_Package;

/
--------------------------------------------------------
--  DDL for Package PAGECONTENT_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "PAGECONTENT_PACKAGE" IS
  PROCEDURE Create_PageContent(
    p_PageName IN PageContent.PageName%TYPE,
    p_ContentKey IN PageContent.ContentKey%TYPE,
    p_ContentValue IN PageContent.ContentValue%TYPE
  );

  PROCEDURE Update_PageContent(
    p_PageContentID IN PageContent.PageContentID%TYPE,
    p_PageName IN PageContent.PageName%TYPE,
    p_ContentKey IN PageContent.ContentKey%TYPE,
    p_ContentValue IN PageContent.ContentValue%TYPE
  );

  PROCEDURE Delete_PageContent(
    p_PageContentID IN PageContent.PageContentID%TYPE
  );

  PROCEDURE Get_PageContent_By_ID(
    p_PageContentID IN PageContent.PageContentID%TYPE
  );

  PROCEDURE Get_All_PageContent;
END PageContent_Package;


/
--------------------------------------------------------
--  DDL for Package ROLE_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "ROLE_PACKAGE" 
as
PROCEDURE Create_Role (role_Name in ROLE.rolename%TYPE);
PROCEDURE update_Role (Role_Id in ROLE.roleid%TYPE, role_Name in ROLE.rolename%TYPE);
PROCEDURE Delete_Role (Role_Id in ROLE.roleid%TYPE);
PROCEDURE GetAllRole;
PROCEDURE GetRoleById(Role_Id in ROLE.roleid%type);
END Role_Package;

/
--------------------------------------------------------
--  DDL for Package SEARCH_CHILDREN_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "SEARCH_CHILDREN_PACKAGE" AS
    PROCEDURE Search_Children_By_Name(
        search_Name IN Children.firstname%type
    );
END Search_Children_Package;

/
--------------------------------------------------------
--  DDL for Package TESTIMONIAL_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "TESTIMONIAL_PACKAGE" IS
  PROCEDURE create_TESTIMONIAL(
    c_MESSAGE IN TESTIMONIAL.MESSAGE%TYPE,
    c_PUBLISHER_ID IN TESTIMONIAL.PUBLISHER_ID%TYPE,
    c_STATUS IN TESTIMONIAL.STATUS%TYPE
  );

  PROCEDURE update_TESTIMONIAL(
    u_TESTIMONIALID IN TESTIMONIAL.TESTIMONIALID%TYPE,
    u_MESSAGE IN TESTIMONIAL.MESSAGE%TYPE,
    u_PUBLISHER_ID IN TESTIMONIAL.PUBLISHER_ID%TYPE,
    u_STATUS IN TESTIMONIAL.STATUS%TYPE
  );

  PROCEDURE delete_TESTIMONIAL(
    d_TESTIMONIALID IN TESTIMONIAL.TESTIMONIALID%TYPE
  );

  PROCEDURE get_TESTIMONIAL_by_id(
    get_TESTIMONIALID IN TESTIMONIAL.TESTIMONIALID%TYPE
  );

  PROCEDURE get_all_TESTIMONIAL;

END TESTIMONIAL_package;

/
--------------------------------------------------------
--  DDL for Package USER__PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "USER__PACKAGE" IS
  PROCEDURE create_user_(
        First_name IN USER_.FIRSTNAME%TYPE,
        Last_name IN USER_.LASTNAME%TYPE,
        User_name IN USER_.USERNAME%TYPE,
        Pass IN LOGIN.PASSWORD%TYPE,
        E_mail IN LOGIN.EMAIL%TYPE,
        Phone_num IN USER_.PHONE%TYPE,
        addres IN USER_.ADDRESS%TYPE,
        Role_id IN USER_.ROLEID%TYPE,
        Gender_name IN USER_.GENDER%TYPE,
        Image_path IN USER_.IMAGEPATH%TYPE,
        User_Id OUT USER_.USERID%TYPE
    ) ;

  PROCEDURE update_user_(
    u_userID IN user_.userID%TYPE,
    u_firstname IN user_.firstname%TYPE,
    u_lastname IN user_.lastname%TYPE,
    u_address IN user_.address%TYPE,
    u_username IN user_.username%TYPE,
    u_imagepath IN user_.imagepath%TYPE,
    u_gender IN user_.gender%TYPE,
    u_phone IN user_.phone%TYPE
  );

  PROCEDURE delete_user_(
    d_userID IN user_.userID%TYPE
  );

  PROCEDURE get_user__by_id(
    get_userID IN user_.userID%TYPE
  );

  PROCEDURE get_all_user_;

END user__package;

/
--------------------------------------------------------
--  DDL for Package Body ARRIVAL_STATUS_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "ARRIVAL_STATUS_PACKAGE" AS
  ----------------------------Create Arrival-------------------------------------
  PROCEDURE Create_Arrival(
      c_STATUS IN ARRIVAL.STATUS%TYPE,
      c_TEACHERID IN ARRIVAL.TEACHERID%TYPE,
      c_CHILDID IN ARRIVAL.CHILDID%TYPE
  ) AS
  BEGIN
      INSERT INTO ARRIVAL (STATUS, TEACHERID, CHILDID)
      VALUES (c_STATUS, c_TEACHERID, c_CHILDID);
      COMMIT;
  END Create_Arrival;

  -----------------------------Update Arrival--------------------------------------
  PROCEDURE Update_Arrival(
      u_ARRIVALID IN ARRIVAL.ARRIVALID%TYPE,
      u_STATUS IN ARRIVAL.STATUS%TYPE,
      u_TEACHERID IN ARRIVAL.TEACHERID%TYPE,
      u_CHILDID IN ARRIVAL.CHILDID%TYPE
  ) AS
  BEGIN
      UPDATE ARRIVAL SET
          STATUS= u_STATUS,
          TEACHERID = u_TEACHERID,
          CHILDID = u_CHILDID
      WHERE ARRIVALID = u_ARRIVALID;
      COMMIT;
  END Update_Arrival;

  ------------------------Delete Arrival---------------------------------
  PROCEDURE Delete_Arrival(
      d_ARRIVALID IN ARRIVAL.ARRIVALID%TYPE
  ) AS
  BEGIN
      DELETE FROM ARRIVAL WHERE ARRIVALID = d_ARRIVALID;
      COMMIT;
  END Delete_Arrival;

  ------------------Get All Arrivals------------------------------------------
  PROCEDURE GetAllArrivals
  AS
    arrivalCur SYS_REFCURSOR;
  BEGIN
    OPEN arrivalCur FOR SELECT * FROM ARRIVAL;
    DBMS_SQL.RETURN_RESULT(arrivalCur);
  END GetAllArrivals;

  ------------------Get Arrival By Id------------------------------------------
  PROCEDURE Get_Arrival_By_Id(
      get_ARRIVALID IN ARRIVAL.ARRIVALID%TYPE
  ) AS
    arrivalCur SYS_REFCURSOR;
  BEGIN
    OPEN arrivalCur FOR SELECT * FROM ARRIVAL WHERE ARRIVALID = get_ARRIVALID;
    DBMS_SQL.RETURN_RESULT(arrivalCur);
  END Get_Arrival_By_Id;

END Arrival_Status_Package;

/
--------------------------------------------------------
--  DDL for Package Body ATTENDANCE_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "ATTENDANCE_PACKAGE" IS
  PROCEDURE create_ATTENDANCE(
    c_ATTENDANCEDATE IN ATTENDANCE.ATTENDANCEDATE%TYPE,
    c_ChildId IN ATTENDANCE.ChildId%TYPE,
    c_STATUS IN ATTENDANCE.STATUS%TYPE,
    c_teacherId IN ATTENDANCE.teacherId%TYPE
  ) IS
  BEGIN
    INSERT INTO ATTENDANCE (ATTENDANCEDATE, ChildId, Status, teacherId)
    VALUES (c_ATTENDANCEDATE, c_ChildId, c_Status, c_teacherId);
    COMMIT;
  END create_ATTENDANCE;

  PROCEDURE update_ATTENDANCE(
    u_ATTENDANCEId IN ATTENDANCE.ATTENDANCEId%TYPE,
    u_ATTENDANCEDATE IN ATTENDANCE.ATTENDANCEDATE%TYPE,
    u_ChildId IN ATTENDANCE.ChildId%TYPE,
    u_STATUS IN ATTENDANCE.STATUS%TYPE,
    u_teacherId IN ATTENDANCE.teacherId%TYPE
  ) IS
  BEGIN
    UPDATE ATTENDANCE SET
      ATTENDANCEDATE = u_ATTENDANCEDATE,
      ChildId = u_ChildId,
      Status = u_Status,
      teacherId = u_teacherId
    WHERE ATTENDANCEId = u_ATTENDANCEId;
    COMMIT;
  END update_ATTENDANCE;

  PROCEDURE delete_ATTENDANCE(
    d_ATTENDANCEId IN ATTENDANCE.ATTENDANCEId%TYPE
  ) IS
  BEGIN
    DELETE FROM ATTENDANCE WHERE ATTENDANCEId = d_ATTENDANCEId;
    COMMIT;
  END delete_ATTENDANCE;

  PROCEDURE get_ATTENDANCE_by_id(
    get_ATTENDANCEId IN ATTENDANCE.ATTENDANCEId%TYPE
  ) IS
    c_get SYS_REFCURSOR;
  BEGIN
    OPEN c_get FOR SELECT * FROM ATTENDANCE WHERE ATTENDANCEId = get_ATTENDANCEId;
    DBMS_SQL.RETURN_RESULT(c_get);
  END get_ATTENDANCE_by_id;

  PROCEDURE get_all_ATTENDANCE IS
    c_g_all SYS_REFCURSOR;
  BEGIN
    OPEN c_g_all FOR SELECT * FROM ATTENDANCE;
    DBMS_SQL.RETURN_RESULT(c_g_all);
  END get_all_ATTENDANCE;

END ATTENDANCE_package;

/
--------------------------------------------------------
--  DDL for Package Body BUSES_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "BUSES_PACKAGE" IS
  PROCEDURE create_Buses(
    c_BusNumber IN Buses.BusNumber%TYPE,
    c_ChildrenNumber IN Buses.ChildrenNumber%TYPE,
    c_DriverId IN Buses.DriverId%TYPE,
    c_TEACHERID IN Buses.TEACHERID%Type
  ) IS
  BEGIN
    INSERT INTO Buses (BusNumber, ChildrenNumber, DriverId)
    VALUES (c_BusNumber, c_ChildrenNumber, c_DriverId);
    COMMIT;
  END create_Buses;

  PROCEDURE update_Buses(
    u_BusId IN Buses.BusId%TYPE,
    u_BusNumber IN Buses.BusNumber%TYPE,
    u_ChildrenNumber IN Buses.ChildrenNumber%TYPE,
    u_DriverId IN Buses.DriverId%TYPE,
    u_TEACHERID IN Buses.TEACHERID%Type
  ) IS
  BEGIN
    UPDATE Buses SET
      BusNumber = u_BusNumber,
      ChildrenNumber = u_ChildrenNumber,
      DriverId = u_DriverId,
      TEACHERID= u_TEACHERID

    WHERE BusId = u_BusId;
    COMMIT;
  END update_Buses;

  PROCEDURE delete_Buses(
    d_BusId IN Buses.BusId%TYPE
  ) IS
  BEGIN
    DELETE FROM Buses WHERE BusId = d_BusId;
    COMMIT;
  END delete_Buses;

  PROCEDURE get_Buses_by_id(
    get_BusId IN Buses.BusId%TYPE
  ) IS
    c_get SYS_REFCURSOR;
  BEGIN
    OPEN c_get FOR SELECT * FROM Buses WHERE BusId = get_BusId;
    DBMS_SQL.RETURN_RESULT(c_get);
  END get_Buses_by_id;

  PROCEDURE get_all_Buses IS
    c_g_all SYS_REFCURSOR;
  BEGIN
    OPEN c_g_all FOR SELECT b.*,
        driver_user.USERNAME AS driver_name,
        teacher_user.USERNAME AS teacher_name
    FROM 
        Buses b
    LEFT JOIN 
        user_ driver_user ON driver_user.USERID = b.driverid
    LEFT JOIN 
        user_ teacher_user ON teacher_user.USERID = b.TEACHERID;
    DBMS_SQL.RETURN_RESULT(c_g_all);
  END get_all_Buses;

END Buses_package;

/
--------------------------------------------------------
--  DDL for Package Body BUSLOCATION_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "BUSLOCATION_PACKAGE" IS
  PROCEDURE Create_BusLocation(
    p_Latitude IN BusLocation.Latitude%TYPE,
    p_Longitude IN BusLocation.Longitude%TYPE,
    p_BusID IN BusLocation.Bus_ID%TYPE
  ) IS
  BEGIN
    INSERT INTO BusLocation (Latitude, Longitude, Bus_ID)
    VALUES (p_Latitude, p_Longitude, p_BusID);
    COMMIT;
  END Create_BusLocation;

  PROCEDURE Update_BusLocation(
    p_LocationID IN BusLocation.LocationID%TYPE,
    p_Latitude IN BusLocation.Latitude%TYPE,
    p_Longitude IN BusLocation.Longitude%TYPE,
    p_BusID IN BusLocation.Bus_ID%TYPE
  ) IS
  BEGIN
    UPDATE BusLocation
    SET Latitude = p_Latitude,
        Longitude = p_Longitude,
        Bus_ID = p_BusID
    WHERE LocationID = p_LocationID;
    COMMIT;
  END Update_BusLocation;

  PROCEDURE Delete_BusLocation(
    p_LocationID IN BusLocation.LocationID%TYPE
  ) IS
  BEGIN
    DELETE FROM BusLocation WHERE LocationID = p_LocationID;
    COMMIT;
  END Delete_BusLocation;

  PROCEDURE Get_BusLocation_By_ID(
    p_LocationID IN BusLocation.LocationID%TYPE
  ) IS
    c_get SYS_REFCURSOR;
  BEGIN
    OPEN c_get FOR SELECT * FROM BusLocation WHERE LocationID = p_LocationID;
    DBMS_SQL.RETURN_RESULT(c_get);
  END Get_BusLocation_By_ID;

  PROCEDURE Get_All_BusLocations IS
    c_get SYS_REFCURSOR;
  BEGIN
    OPEN c_get FOR SELECT * FROM BusLocation;
    DBMS_SQL.RETURN_RESULT(c_get);
  END Get_All_BusLocations;
END BusLocation_Package;

/
--------------------------------------------------------
--  DDL for Package Body BUSROUTE_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "BUSROUTE_PACKAGE" IS
  PROCEDURE Create_BusRoute(
    p_Sequence IN BusRoute.Sequence%TYPE,
    p_BusesID IN BusRoute.Buses_ID%TYPE,
    p_LocationID IN BusRoute.Location_ID%TYPE
  ) IS
  BEGIN
    INSERT INTO BusRoute (Sequence, Buses_ID, Location_ID)
    VALUES (p_Sequence, p_BusesID, p_LocationID);
    COMMIT;
  END Create_BusRoute;

  PROCEDURE Update_BusRoute(
    p_RouteID IN BusRoute.RouteID%TYPE,
    p_Sequence IN BusRoute.Sequence%TYPE,
    p_BusesID IN BusRoute.Buses_ID%TYPE,
    p_LocationID IN BusRoute.Location_ID%TYPE
  ) IS
  BEGIN
    UPDATE BusRoute
    SET Sequence = p_Sequence,
        Buses_ID = p_BusesID,
        Location_ID = p_LocationID
    WHERE RouteID = p_RouteID;
    COMMIT;
  END Update_BusRoute;

  PROCEDURE Delete_BusRoute(
    p_RouteID IN BusRoute.RouteID%TYPE
  ) IS
  BEGIN
    DELETE FROM BusRoute WHERE RouteID = p_RouteID;
    COMMIT;
  END Delete_BusRoute;

  PROCEDURE Get_BusRoute_By_ID(
    p_RouteID IN BusRoute.RouteID%TYPE
  ) IS
    c_get SYS_REFCURSOR;
  BEGIN
    OPEN c_get FOR SELECT * FROM BusRoute WHERE RouteID = p_RouteID;
    DBMS_SQL.RETURN_RESULT(c_get);
  END Get_BusRoute_By_ID;

  PROCEDURE Get_All_BusRoutes IS
    c_get SYS_REFCURSOR;
  BEGIN
    OPEN c_get FOR SELECT * FROM BusRoute;
    DBMS_SQL.RETURN_RESULT(c_get);
  END Get_All_BusRoutes;
END BusRoute_Package;

/
--------------------------------------------------------
--  DDL for Package Body CHILDREN_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "CHILDREN_PACKAGE" IS
  PROCEDURE create_Children(
    c_firstName IN Children.firstName%TYPE,
    c_lastName IN Children.lastName%TYPE,
    c_Address IN Children.Address%TYPE,
    c_ParentId IN Children.ParentId%TYPE,
    c_BusId IN Children.BusId%TYPE
  ) IS
  BEGIN
    INSERT INTO Children (firstName, lastName, Address, ParentId, BusId)
    VALUES (c_firstName, c_lastName, c_Address, c_ParentId, c_BusId);
    COMMIT;
  END create_Children;

  PROCEDURE update_Children(
    u_ChildId IN Children.ChildId%TYPE,
    u_firstName IN Children.firstName%TYPE,
    u_lastName IN Children.lastName%TYPE,
    u_Address IN Children.Address%TYPE,
    u_ParentId IN Children.ParentId%TYPE,
    u_BusId IN Children.BusId%TYPE
  ) IS
  BEGIN
    UPDATE Children SET
      firstName = u_firstName,
      lastName = u_lastName,
      Address = u_Address,
      ParentId = u_ParentId,
      BusId = u_BusId
    WHERE ChildId = u_ChildId;
    COMMIT;
  END update_Children;

  PROCEDURE delete_Children(
    d_ChildId IN Children.ChildId%TYPE
  ) IS
  BEGIN
    DELETE FROM Children WHERE ChildId = d_ChildId;
    COMMIT;
  END delete_Children;

 PROCEDURE get_Children_by_id(
    get_ChildId IN Children.ChildId%TYPE
  ) IS
    c_get SYS_REFCURSOR;
  BEGIN
    OPEN c_get FOR SELECT c.*,b.busnumber,u.firstname||' '||u.lastname as parent FROM Children c  
    inner join buses b
    on c.busid= b.busid 
    inner join user_ u
    on c.parentid=u.userid
    WHERE ChildId = get_ChildId;
    DBMS_SQL.RETURN_RESULT(c_get);
  END get_Children_by_id;

  PROCEDURE get_all_Children IS
    c_g_all SYS_REFCURSOR;
  BEGIN
    OPEN c_g_all FOR SELECT c.*,b.busnumber,u.firstname||' '||u.lastname as parent FROM Children c  
    inner join buses b
    on c.busid= b.busid
    inner join user_ u
    on c.parentid=u.userid;
    DBMS_SQL.RETURN_RESULT(c_g_all);
  END get_all_Children;

END Children_package;

/
--------------------------------------------------------
--  DDL for Package Body CONTACTUS_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "CONTACTUS_PACKAGE" IS
  PROCEDURE create_CONTACTUS(
    c_UserNAME IN CONTACTUS."UserNAME"%TYPE,
    c_SUBJECT IN CONTACTUS."SUBJECT"%TYPE,
    c_UserEMAIL IN CONTACTUS."UserEMAIL"%TYPE,
    c_MESSAGE IN CONTACTUS."MESSAGE"%TYPE,
    c_CONTACTDATE IN CONTACTUS."CONTACTDATE"%TYPE
  ) IS
  BEGIN
    INSERT INTO CONTACTUS ("UserNAME", "SUBJECT", "UserEMAIL", "MESSAGE", "CONTACTDATE")
    VALUES (c_UserNAME, c_SUBJECT, c_UserEMAIL, c_MESSAGE, c_CONTACTDATE);
    COMMIT;
  END create_CONTACTUS;

  PROCEDURE update_CONTACTUS(
    u_CONTACTUSID IN CONTACTUS."CONTACTUSID"%TYPE,
    u_UserNAME IN CONTACTUS."UserNAME"%TYPE,
    u_SUBJECT IN CONTACTUS."SUBJECT"%TYPE,
    u_UserEMAIL IN CONTACTUS."UserEMAIL"%TYPE,
    u_MESSAGE IN CONTACTUS."MESSAGE"%TYPE,
    u_CONTACTDATE IN CONTACTUS."CONTACTDATE"%TYPE
  ) IS
  BEGIN
    UPDATE CONTACTUS SET
      "UserNAME" = u_UserNAME,
      "SUBJECT" = u_SUBJECT,
      "UserEMAIL" = u_UserEMAIL,
      "MESSAGE" = u_MESSAGE,
      "CONTACTDATE" = u_CONTACTDATE
    WHERE "CONTACTUSID" = u_CONTACTUSID;
    COMMIT;
  END update_CONTACTUS;

  PROCEDURE delete_CONTACTUS(
    d_CONTACTUSID IN CONTACTUS."CONTACTUSID"%TYPE
  ) IS
  BEGIN
    DELETE FROM CONTACTUS WHERE "CONTACTUSID" = d_CONTACTUSID;
    COMMIT;
  END delete_CONTACTUS;

  PROCEDURE get_CONTACTUS_by_id(
    get_CONTACTUSID IN CONTACTUS."CONTACTUSID"%TYPE
  ) IS
    c_get SYS_REFCURSOR;
  BEGIN
    OPEN c_get FOR SELECT * FROM CONTACTUS WHERE "CONTACTUSID" = get_CONTACTUSID;
    DBMS_SQL.RETURN_RESULT(c_get);
  END get_CONTACTUS_by_id;

  PROCEDURE get_all_CONTACTUS IS
    c_g_all SYS_REFCURSOR;
  BEGIN
    OPEN c_g_all FOR SELECT * FROM CONTACTUS;
    DBMS_SQL.RETURN_RESULT(c_g_all);
  END get_all_CONTACTUS;

END CONTACTUS_package;


/
--------------------------------------------------------
--  DDL for Package Body LOGIN_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "LOGIN_PACKAGE" 
as 
procedure Login (E_mail in varchar2 , Pass in varchar2)
as 
cur sys_refcursor;
begin 
open cur for
select u.userid , u.roleid 
from login l
inner join user_ u
on l.userid = u.userid
where lower(l.email)=lower(E_mail)and l.password =Pass;
dbms_sql.return_result(cur);
end ;
end Login_Package;

/
--------------------------------------------------------
--  DDL for Package Body PAGECONTENT_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "PAGECONTENT_PACKAGE" IS
  PROCEDURE Create_PageContent(
    p_PageName IN PageContent.PageName%TYPE,
    p_ContentKey IN PageContent.ContentKey%TYPE,
    p_ContentValue IN PageContent.ContentValue%TYPE
  ) IS
  BEGIN
    INSERT INTO PageContent (PageName, ContentKey, ContentValue)
    VALUES (p_PageName, p_ContentKey, p_ContentValue);
    COMMIT;
  END Create_PageContent;

  PROCEDURE Update_PageContent(
    p_PageContentID IN PageContent.PageContentID%TYPE,
    p_PageName IN PageContent.PageName%TYPE,
    p_ContentKey IN PageContent.ContentKey%TYPE,
    p_ContentValue IN PageContent.ContentValue%TYPE
  ) IS
  BEGIN
    UPDATE PageContent
    SET PageName = p_PageName,
        ContentKey = p_ContentKey,
        ContentValue = p_ContentValue
    WHERE PageContentID = p_PageContentID;
    COMMIT;
  END Update_PageContent;

  PROCEDURE Delete_PageContent(
    p_PageContentID IN PageContent.PageContentID%TYPE
  ) IS
  BEGIN
    DELETE FROM PageContent WHERE PageContentID = p_PageContentID;
    COMMIT;
  END Delete_PageContent;

  PROCEDURE Get_PageContent_By_ID(
    p_PageContentID IN PageContent.PageContentID%TYPE
  ) IS
    c_get SYS_REFCURSOR;
  BEGIN
    OPEN c_get FOR SELECT * FROM PageContent WHERE PageContentID = p_PageContentID;
    DBMS_SQL.RETURN_RESULT(c_get);
  END Get_PageContent_By_ID;

  PROCEDURE Get_All_PageContent IS
    c_get SYS_REFCURSOR;
  BEGIN
    OPEN c_get FOR SELECT * FROM PageContent;
    DBMS_SQL.RETURN_RESULT(c_get);
  END Get_All_PageContent;
END PageContent_Package;

/
--------------------------------------------------------
--  DDL for Package Body ROLE_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "ROLE_PACKAGE" 
AS
  ----------------------------Create Role-------------------------------------
  PROCEDURE Create_Role(role_Name IN ROLE.rolename%TYPE)
  AS
  BEGIN
    INSERT INTO ROLE (roleid, rolename) VALUES (DEFAULT,role_Name);
    COMMIT;
  END Create_Role;

  -----------------------------Update Role--------------------------------------
  PROCEDURE Update_Role(Role_Id IN ROLE.roleid%TYPE, role_Name IN ROLE.rolename%TYPE)
  is
  BEGIN
    UPDATE ROLE 
    SET rolename = role_Name
    WHERE role.roleid = Role_Id;
    COMMIT;
  END Update_Role;

  ------------------------Delete Role---------------------------------
  PROCEDURE Delete_Role(Role_Id IN ROLE.roleid%TYPE)
  AS
  BEGIN
    DELETE FROM ROLE 
    WHERE roleid = Role_Id;
    COMMIT;
  END Delete_Role;

  ------------------Get All Roles------------------------------------------
  PROCEDURE GetAllRole
  AS
    roleCur SYS_REFCURSOR;
  BEGIN
    OPEN roleCur FOR SELECT * FROM ROLE;
    DBMS_SQL.RETURN_RESULT(roleCur);
  END GetAllRole;

  ------------------Get Role By ID------------------------------------------
  PROCEDURE GetRoleById(Role_Id IN ROLE.roleid%TYPE)
  AS
    GetRole_Cur SYS_REFCURSOR;
  BEGIN
    OPEN GetRole_Cur FOR SELECT * FROM ROLE WHERE roleid = Role_Id;
    DBMS_SQL.RETURN_RESULT(GetRole_Cur);
  END GetRoleById;

END ROLE_PACKAGE;

/
--------------------------------------------------------
--  DDL for Package Body SEARCH_CHILDREN_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "SEARCH_CHILDREN_PACKAGE" AS
    PROCEDURE Search_Children_By_Name(
        search_Name IN Children.firstname%type
    ) AS
    result_cursor SYS_REFCURSOR;
    BEGIN
        OPEN result_cursor FOR
        SELECT *
        FROM children
        WHERE LOWER(firstname) LIKE LOWER('%'||search_Name||'%')
        or  LOWER(lastname) LIKE LOWER('%'||search_Name||'%');
        dbms_sql.return_result(result_cursor);
    END Search_Children_By_Name;
END Search_Children_Package;

/
--------------------------------------------------------
--  DDL for Package Body TESTIMONIAL_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "TESTIMONIAL_PACKAGE" IS
  PROCEDURE create_TESTIMONIAL(
    c_MESSAGE IN TESTIMONIAL.MESSAGE%TYPE,
    c_PUBLISHER_ID IN TESTIMONIAL.PUBLISHER_ID%TYPE,
    c_STATUS IN TESTIMONIAL.STATUS%TYPE
  ) IS
  BEGIN
    INSERT INTO TESTIMONIAL (MESSAGE, PUBLISHER_ID, STATUS)
    VALUES (c_MESSAGE, c_PUBLISHER_ID, c_STATUS);
    COMMIT;
  END create_TESTIMONIAL;

  PROCEDURE update_TESTIMONIAL(
    u_TESTIMONIALID IN TESTIMONIAL.TESTIMONIALID%TYPE,
    u_MESSAGE IN TESTIMONIAL.MESSAGE%TYPE,
    u_PUBLISHER_ID IN TESTIMONIAL.PUBLISHER_ID%TYPE,
    u_STATUS IN TESTIMONIAL.STATUS%TYPE
  ) IS
  BEGIN
    UPDATE TESTIMONIAL SET
      MESSAGE = u_MESSAGE,
      PUBLISHER_ID = u_PUBLISHER_ID,
      STATUS = u_STATUS
    WHERE TESTIMONIALID = u_TESTIMONIALID;
    COMMIT;
  END update_TESTIMONIAL;

  PROCEDURE delete_TESTIMONIAL(
    d_TESTIMONIALID IN TESTIMONIAL.TESTIMONIALID%TYPE
  ) IS
  BEGIN
    DELETE FROM TESTIMONIAL WHERE TESTIMONIALID = d_TESTIMONIALID;
    COMMIT;
  END delete_TESTIMONIAL;

  PROCEDURE get_TESTIMONIAL_by_id(
    get_TESTIMONIALID IN TESTIMONIAL.TESTIMONIALID%TYPE
  ) IS
    c_get SYS_REFCURSOR;
  BEGIN
    OPEN c_get FOR SELECT T.* , u.FIRSTNAME || ' ' || u.LASTNAME as Full_Name  FROM TESTIMONIAL T inner join user_ u on T.PUBLISHER_ID = u.USERID;
    DBMS_SQL.RETURN_RESULT(c_get);
  END get_TESTIMONIAL_by_id;

  PROCEDURE get_all_TESTIMONIAL IS
    c_g_all SYS_REFCURSOR;
  BEGIN
    OPEN c_g_all FOR SELECT T.* , u.FIRSTNAME || ' ' || u.LASTNAME as Full_Name  FROM TESTIMONIAL T inner join user_ u on T.PUBLISHER_ID = u.USERID;
    DBMS_SQL.RETURN_RESULT(c_g_all);
  END get_all_TESTIMONIAL;

END TESTIMONIAL_package;

/
--------------------------------------------------------
--  DDL for Package Body USER__PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "USER__PACKAGE" IS
  PROCEDURE create_user_(
        First_name IN USER_.FIRSTNAME%TYPE,
        Last_name IN USER_.LASTNAME%TYPE,
        User_name IN USER_.USERNAME%TYPE,
        Pass IN LOGIN.PASSWORD%TYPE,
        E_mail IN LOGIN.EMAIL%TYPE,
        Phone_num IN USER_.PHONE%TYPE,
        addres IN USER_.ADDRESS%TYPE,
        Role_id IN USER_.ROLEID%TYPE,
        Gender_name IN USER_.GENDER%TYPE,
        Image_path IN USER_.IMAGEPATH%TYPE,
        User_Id OUT USER_.USERID%TYPE
    ) AS
    BEGIN
        -- Insert into USER_ table
        INSERT INTO USER_ (USERID,FIRSTNAME, LASTNAME, USERNAME, PHONE, ADDRESS, ROLEID, GENDER, IMAGEPATH)
        VALUES (DEFAULT,First_name, Last_name, User_name,Phone_num , addres, Role_id, Gender_name, Image_path)
        RETURNING USERID INTO User_Id;

        -- Insert into LOGIN table
        INSERT INTO LOGIN (EMAIL, PASSWORD, USERID)
        VALUES (E_mail, Pass, User_Id);
  END create_user_;

  PROCEDURE update_user_(
    u_userID IN user_.userID%TYPE,
    u_firstname IN user_.firstname%TYPE,
    u_lastname IN user_.lastname%TYPE,
    u_address IN user_.address%TYPE,
    u_username IN user_.username%TYPE,
    u_imagepath IN user_.imagepath%TYPE,
    u_gender IN user_.gender%TYPE,
    u_phone IN user_.phone%TYPE
  ) IS
  BEGIN
    UPDATE user_ SET
      firstname = u_firstname,
      lastname = u_lastname,
      address = u_address,
      username = u_username,
      imagepath = u_imagepath,
      gender = u_gender,
      phone = u_phone
    WHERE userID = u_userID;
    COMMIT;
  END update_user_;

  PROCEDURE delete_user_(
    d_userID IN user_.userID%TYPE
  ) IS
  BEGIN
    DELETE FROM user_ WHERE userID = d_userID;
    COMMIT;
  END delete_user_;

  PROCEDURE get_user__by_id(
    get_userID IN user_.userID%TYPE
  ) IS
    c_get SYS_REFCURSOR;
  BEGIN
    OPEN c_get FOR SELECT * FROM user_ WHERE userID = get_userID;
    DBMS_SQL.RETURN_RESULT(c_get);
  END get_user__by_id;

  PROCEDURE get_all_user_ IS
    c_g_all SYS_REFCURSOR;
  BEGIN
    OPEN c_g_all FOR SELECT * 
    FROM user_  u
    inner join Role r 
    on u.roleid=r.roleid;
    DBMS_SQL.RETURN_RESULT(c_g_all);
  END get_all_user_;

END user__package;

/
--------------------------------------------------------
--  Constraints for Table ATTENDANCE
--------------------------------------------------------

  ALTER TABLE "ATTENDANCE" ADD PRIMARY KEY ("ATTENDANCEID")
  USING INDEX  ENABLE;
  ALTER TABLE "ATTENDANCE" MODIFY ("STATUS" NOT NULL ENABLE);
  ALTER TABLE "ATTENDANCE" MODIFY ("ATTENDANCEID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table USER_
--------------------------------------------------------

  ALTER TABLE "USER_" MODIFY ("USERID" NOT NULL ENABLE);
  ALTER TABLE "USER_" MODIFY ("FIRSTNAME" NOT NULL ENABLE);
  ALTER TABLE "USER_" ADD PRIMARY KEY ("USERID")
  USING INDEX  ENABLE;
  ALTER TABLE "USER_" MODIFY ("LASTNAME" NOT NULL ENABLE);
  ALTER TABLE "USER_" MODIFY ("USERNAME" NOT NULL ENABLE);
  ALTER TABLE "USER_" ADD CONSTRAINT "USER__UK1" UNIQUE ("USERNAME")
  USING INDEX "USER__UK1"  ENABLE;
--------------------------------------------------------
--  Constraints for Table ARRIVAL
--------------------------------------------------------

  ALTER TABLE "ARRIVAL" MODIFY ("ARRIVALID" NOT NULL ENABLE);
  ALTER TABLE "ARRIVAL" MODIFY ("STATUS" NOT NULL ENABLE);
  ALTER TABLE "ARRIVAL" ADD PRIMARY KEY ("ARRIVALID")
  USING INDEX  ENABLE;
--------------------------------------------------------
--  Constraints for Table BUSES
--------------------------------------------------------

  ALTER TABLE "BUSES" MODIFY ("BUSID" NOT NULL ENABLE);
  ALTER TABLE "BUSES" MODIFY ("BUSNUMBER" NOT NULL ENABLE);
  ALTER TABLE "BUSES" ADD PRIMARY KEY ("BUSID")
  USING INDEX  ENABLE;
--------------------------------------------------------
--  Constraints for Table NOTIFICATIONS
--------------------------------------------------------

  ALTER TABLE "NOTIFICATIONS" MODIFY ("NOTIFICATIONID" NOT NULL ENABLE);
  ALTER TABLE "NOTIFICATIONS" ADD PRIMARY KEY ("NOTIFICATIONID")
  USING INDEX  ENABLE;
--------------------------------------------------------
--  Constraints for Table CONTACTUS
--------------------------------------------------------

  ALTER TABLE "CONTACTUS" MODIFY ("CONTACTUSID" NOT NULL ENABLE);
  ALTER TABLE "CONTACTUS" ADD PRIMARY KEY ("CONTACTUSID")
  USING INDEX  ENABLE;
--------------------------------------------------------
--  Constraints for Table PAGECONTENT
--------------------------------------------------------

  ALTER TABLE "PAGECONTENT" MODIFY ("PAGECONTENTID" NOT NULL ENABLE);
  ALTER TABLE "PAGECONTENT" ADD PRIMARY KEY ("PAGECONTENTID")
  USING INDEX  ENABLE;
--------------------------------------------------------
--  Constraints for Table ROLE
--------------------------------------------------------

  ALTER TABLE "ROLE" MODIFY ("ROLEID" NOT NULL ENABLE);
  ALTER TABLE "ROLE" MODIFY ("ROLENAME" NOT NULL ENABLE);
  ALTER TABLE "ROLE" ADD PRIMARY KEY ("ROLEID")
  USING INDEX  ENABLE;
--------------------------------------------------------
--  Constraints for Table BUSLOCATION
--------------------------------------------------------

  ALTER TABLE "BUSLOCATION" MODIFY ("LOCATIONID" NOT NULL ENABLE);
  ALTER TABLE "BUSLOCATION" MODIFY ("LATITUDE" NOT NULL ENABLE);
  ALTER TABLE "BUSLOCATION" MODIFY ("LONGITUDE" NOT NULL ENABLE);
  ALTER TABLE "BUSLOCATION" ADD PRIMARY KEY ("LOCATIONID")
  USING INDEX  ENABLE;
--------------------------------------------------------
--  Constraints for Table BUSROUTE
--------------------------------------------------------

  ALTER TABLE "BUSROUTE" MODIFY ("ROUTEID" NOT NULL ENABLE);
  ALTER TABLE "BUSROUTE" MODIFY ("SEQUENCE" NOT NULL ENABLE);
  ALTER TABLE "BUSROUTE" ADD PRIMARY KEY ("ROUTEID")
  USING INDEX  ENABLE;
--------------------------------------------------------
--  Constraints for Table CHILDREN
--------------------------------------------------------

  ALTER TABLE "CHILDREN" MODIFY ("CHILDID" NOT NULL ENABLE);
  ALTER TABLE "CHILDREN" MODIFY ("LASTNAME" NOT NULL ENABLE);
  ALTER TABLE "CHILDREN" MODIFY ("FIRSTNAME" NOT NULL ENABLE);
  ALTER TABLE "CHILDREN" ADD PRIMARY KEY ("CHILDID")
  USING INDEX  ENABLE;
--------------------------------------------------------
--  Constraints for Table TESTIMONIAL
--------------------------------------------------------

  ALTER TABLE "TESTIMONIAL" MODIFY ("TESTIMONIALID" NOT NULL ENABLE);
  ALTER TABLE "TESTIMONIAL" MODIFY ("STATUS" NOT NULL ENABLE);
  ALTER TABLE "TESTIMONIAL" MODIFY ("MESSAGE" NOT NULL ENABLE);
  ALTER TABLE "TESTIMONIAL" ADD PRIMARY KEY ("TESTIMONIALID")
  USING INDEX  ENABLE;
--------------------------------------------------------
--  Constraints for Table LOGIN
--------------------------------------------------------

  ALTER TABLE "LOGIN" MODIFY ("LOGINID" NOT NULL ENABLE);
  ALTER TABLE "LOGIN" MODIFY ("EMAIL" NOT NULL ENABLE);
  ALTER TABLE "LOGIN" MODIFY ("PASSWORD" NOT NULL ENABLE);
  ALTER TABLE "LOGIN" ADD PRIMARY KEY ("LOGINID")
  USING INDEX  ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table ARRIVAL
--------------------------------------------------------

  ALTER TABLE "ARRIVAL" ADD CONSTRAINT "FK_TEACHERID1" FOREIGN KEY ("TEACHERID")
	  REFERENCES "USER_" ("USERID") ON DELETE SET NULL ENABLE;
  ALTER TABLE "ARRIVAL" ADD CONSTRAINT "FK_CHILDID1" FOREIGN KEY ("CHILDID")
	  REFERENCES "CHILDREN" ("CHILDID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table ATTENDANCE
--------------------------------------------------------

  ALTER TABLE "ATTENDANCE" ADD CONSTRAINT "ATTENDANCE_FK1" FOREIGN KEY ("TEACHERID")
	  REFERENCES "USER_" ("USERID") ON DELETE SET NULL ENABLE;
  ALTER TABLE "ATTENDANCE" ADD CONSTRAINT "FK_CHILDID" FOREIGN KEY ("CHILDID")
	  REFERENCES "CHILDREN" ("CHILDID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table BUSES
--------------------------------------------------------

  ALTER TABLE "BUSES" ADD CONSTRAINT "FK_DRIVERID" FOREIGN KEY ("DRIVERID")
	  REFERENCES "USER_" ("USERID") ON DELETE SET NULL ENABLE;
  ALTER TABLE "BUSES" ADD CONSTRAINT "BUSES_FK1" FOREIGN KEY ("TEACHERID")
	  REFERENCES "USER_" ("USERID") ON DELETE SET NULL ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table BUSLOCATION
--------------------------------------------------------

  ALTER TABLE "BUSLOCATION" ADD CONSTRAINT "FK_BUS_ID" FOREIGN KEY ("BUS_ID")
	  REFERENCES "BUSES" ("BUSID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table BUSROUTE
--------------------------------------------------------

  ALTER TABLE "BUSROUTE" ADD CONSTRAINT "FK_BUSES_ID" FOREIGN KEY ("BUSES_ID")
	  REFERENCES "BUSES" ("BUSID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "BUSROUTE" ADD CONSTRAINT "FK_LOCATION_ID" FOREIGN KEY ("LOCATION_ID")
	  REFERENCES "BUSLOCATION" ("LOCATIONID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table CHILDREN
--------------------------------------------------------

  ALTER TABLE "CHILDREN" ADD CONSTRAINT "FK_PARENTID" FOREIGN KEY ("PARENTID")
	  REFERENCES "USER_" ("USERID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "CHILDREN" ADD CONSTRAINT "FK_BUSID" FOREIGN KEY ("BUSID")
	  REFERENCES "BUSES" ("BUSID") ON DELETE SET NULL ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table LOGIN
--------------------------------------------------------

  ALTER TABLE "LOGIN" ADD CONSTRAINT "FK_USERID" FOREIGN KEY ("USERID")
	  REFERENCES "USER_" ("USERID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table NOTIFICATIONS
--------------------------------------------------------

  ALTER TABLE "NOTIFICATIONS" ADD CONSTRAINT "FK_PARENT_ID" FOREIGN KEY ("PARENT_ID")
	  REFERENCES "USER_" ("USERID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "NOTIFICATIONS" ADD CONSTRAINT "FK_TEACHER_ID" FOREIGN KEY ("TEACHER_ID")
	  REFERENCES "USER_" ("USERID") ON DELETE SET NULL ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table TESTIMONIAL
--------------------------------------------------------

  ALTER TABLE "TESTIMONIAL" ADD CONSTRAINT "FK_PUBLISHER_ID" FOREIGN KEY ("PUBLISHER_ID")
	  REFERENCES "USER_" ("USERID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table USER_
--------------------------------------------------------

  ALTER TABLE "USER_" ADD CONSTRAINT "FK_ROLEID" FOREIGN KEY ("ROLEID")
	  REFERENCES "ROLE" ("ROLEID") ON DELETE CASCADE ENABLE;
